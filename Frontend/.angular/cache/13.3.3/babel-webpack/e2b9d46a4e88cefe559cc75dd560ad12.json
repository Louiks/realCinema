{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\banan\\\\Desktop\\\\Studia\\\\LocalProjects\\\\RealCinema\\\\realcinema\\\\Frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@azure/msal-angular\";\nexport class AuthenticationService {\n  constructor(http, msalService) {\n    this.http = http;\n    this.msalService = msalService;\n    const currUser = localStorage.getItem('activeAcc');\n    this.currentUserSubject = new BehaviorSubject(currUser ? JSON.parse(currUser) : null);\n    AuthenticationService.accountInfo = new BehaviorSubject(currUser ? JSON.parse(currUser) : null);\n    this.currentUser = this.currentUserSubject.asObservable();\n  }\n\n  get currentUserValue() {\n    return this.currentUserSubject.value;\n  }\n\n  login(email, password) {\n    return this.http.post(`http://localhost:3000/api/auth/signin`, {\n      email,\n      password\n    }).pipe(map(user => {\n      // store user details and jwt token in local storage to keep user logged in between page refreshes\n      // localStorage.setItem('currentUser', JSON.stringify(user));\n      //this.currentUserSubject.next(user);\n      this.updateAccountInfo(user);\n      return user;\n    }));\n  }\n\n  getUser(email) {\n    return this.http.post(`http://localhost:3000/api/auth/getuser`, {\n      email\n    }).pipe(map(user => {\n      return user;\n    }));\n  }\n\n  logout() {\n    localStorage.removeItem('activeAcc');\n    AuthenticationService.accountInfo.next(null);\n    !!this.msalService.instance.getActiveAccount() && this.logout_msal();\n  }\n\n  register(firstName, lastName, email, username, password) {\n    return this.http.post(`http://localhost:3000/api/auth/signup`, {\n      email,\n      username,\n      password,\n      firstName,\n      lastName\n    }).pipe(map(user => {\n      // store user details and jwt token in local storage to keep user logged in between page refreshes\n      //localStorage.setItem('currentUser', JSON.stringify(user));\n      //this.currentUserSubject.next(user);\n      return user;\n    }));\n  }\n\n  getAccountInfo() {\n    return AuthenticationService.accountInfo.asObservable();\n  }\n\n  updateAccountInfo(accountInfo) {\n    if (!!accountInfo) {\n      localStorage.setItem('activeAcc', JSON.stringify(accountInfo));\n      AuthenticationService.accountInfo.next(accountInfo);\n    }\n  }\n\n  setActiveAccountAfterRedirect() {\n    this.msalService.instance.handleRedirectPromise().then(res => {\n      if (res !== null && res.account != null) {\n        // this.getUser(res.account.name).subscribe (user => {\n        //     console.log('test ',user);\n        //     this.updateAccountInfo(user);\n        // });\n        this.updateAccountInfo({\n          email: res.account.name,\n          username: res.account.username,\n          firstName: 'firstName_not_set',\n          lastName: 'lastName_not_set'\n        });\n        this.msalService.instance.setActiveAccount(res.account); // this.updateAccountInfo(\n        //   {\n        //     email: user.email ?? res.account?.name ?? res.account?.username ?? 'email_not_set',\n        //     username: user.username ?? res.account?.username ?? 'username_not_set',\n        //     firstName: user.firstName ?? 'firstName_not_set',\n        //     lastName: user.lastName ?? 'lastName_not_set',\n        //   }\n        // );\n      }\n\n      ;\n    });\n  }\n\n  loginRedirect() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.msalService.loginRedirect();\n    })();\n  }\n\n  logout_msal() {\n    this.msalService.logout();\n  }\n\n  getUsername() {\n    var _a, _b;\n\n    let JSONAccount = localStorage.getItem('activeAcc');\n    let account = JSONAccount ? JSON.parse(JSONAccount) : undefined;\n    return (_b = (_a = account.name) !== null && _a !== void 0 ? _a : account.username) !== null && _b !== void 0 ? _b : account.email;\n  }\n\n}\n\nAuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n  return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MsalService));\n};\n\nAuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthenticationService,\n  factory: AuthenticationService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/banan/Desktop/Studia/LocalProjects/RealCinema/realcinema/Frontend/src/app/shared/Authentication/authentication.service.ts"],"names":["BehaviorSubject","map","i0","i1","i2","AuthenticationService","constructor","http","msalService","currUser","localStorage","getItem","currentUserSubject","JSON","parse","accountInfo","currentUser","asObservable","currentUserValue","value","login","email","password","post","pipe","user","updateAccountInfo","getUser","logout","removeItem","next","instance","getActiveAccount","logout_msal","register","firstName","lastName","username","getAccountInfo","setItem","stringify","setActiveAccountAfterRedirect","handleRedirectPromise","then","res","account","name","setActiveAccount","loginRedirect","getUsername","_a","_b","JSONAccount","undefined","ɵfac","AuthenticationService_Factory","t","ɵɵinject","HttpClient","MsalService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { BehaviorSubject } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nimport * as i2 from \"@azure/msal-angular\";\r\nexport class AuthenticationService {\r\n    constructor(http, msalService) {\r\n        this.http = http;\r\n        this.msalService = msalService;\r\n        const currUser = localStorage.getItem('activeAcc');\r\n        this.currentUserSubject = new BehaviorSubject(currUser ? JSON.parse(currUser) : null);\r\n        AuthenticationService.accountInfo = new BehaviorSubject(currUser ? JSON.parse(currUser) : null);\r\n        this.currentUser = this.currentUserSubject.asObservable();\r\n    }\r\n    get currentUserValue() {\r\n        return this.currentUserSubject.value;\r\n    }\r\n    login(email, password) {\r\n        return this.http.post(`http://localhost:3000/api/auth/signin`, { email, password })\r\n            .pipe(map(user => {\r\n            // store user details and jwt token in local storage to keep user logged in between page refreshes\r\n            // localStorage.setItem('currentUser', JSON.stringify(user));\r\n            //this.currentUserSubject.next(user);\r\n            this.updateAccountInfo(user);\r\n            return user;\r\n        }));\r\n    }\r\n    getUser(email) {\r\n        return this.http.post(`http://localhost:3000/api/auth/getuser`, { email })\r\n            .pipe(map(user => {\r\n            return user;\r\n        }));\r\n    }\r\n    logout() {\r\n        localStorage.removeItem('activeAcc');\r\n        AuthenticationService.accountInfo.next(null);\r\n        !!this.msalService.instance.getActiveAccount() && this.logout_msal();\r\n    }\r\n    register(firstName, lastName, email, username, password) {\r\n        return this.http.post(`http://localhost:3000/api/auth/signup`, { email, username, password, firstName, lastName })\r\n            .pipe(map(user => {\r\n            // store user details and jwt token in local storage to keep user logged in between page refreshes\r\n            //localStorage.setItem('currentUser', JSON.stringify(user));\r\n            //this.currentUserSubject.next(user);\r\n            return user;\r\n        }));\r\n    }\r\n    getAccountInfo() {\r\n        return AuthenticationService.accountInfo.asObservable();\r\n    }\r\n    updateAccountInfo(accountInfo) {\r\n        if (!!accountInfo) {\r\n            localStorage.setItem('activeAcc', JSON.stringify(accountInfo));\r\n            AuthenticationService.accountInfo.next(accountInfo);\r\n        }\r\n    }\r\n    setActiveAccountAfterRedirect() {\r\n        this.msalService.instance.handleRedirectPromise()\r\n            .then(res => {\r\n            if (res !== null && res.account != null) {\r\n                // this.getUser(res.account.name).subscribe (user => {\r\n                //     console.log('test ',user);\r\n                //     this.updateAccountInfo(user);\r\n                // });\r\n                this.updateAccountInfo({\r\n                    email: res.account.name,\r\n                    username: res.account.username,\r\n                    firstName: 'firstName_not_set',\r\n                    lastName: 'lastName_not_set',\r\n                });\r\n                this.msalService.instance.setActiveAccount(res.account);\r\n                // this.updateAccountInfo(\r\n                //   {\r\n                //     email: user.email ?? res.account?.name ?? res.account?.username ?? 'email_not_set',\r\n                //     username: user.username ?? res.account?.username ?? 'username_not_set',\r\n                //     firstName: user.firstName ?? 'firstName_not_set',\r\n                //     lastName: user.lastName ?? 'lastName_not_set',\r\n                //   }\r\n                // );\r\n            }\r\n            ;\r\n        });\r\n    }\r\n    async loginRedirect() {\r\n        this.msalService.loginRedirect();\r\n    }\r\n    logout_msal() {\r\n        this.msalService.logout();\r\n    }\r\n    getUsername() {\r\n        var _a, _b;\r\n        let JSONAccount = localStorage.getItem('activeAcc');\r\n        let account = JSONAccount ? JSON.parse(JSONAccount) : undefined;\r\n        return (_b = (_a = account.name) !== null && _a !== void 0 ? _a : account.username) !== null && _b !== void 0 ? _b : account.email;\r\n    }\r\n}\r\nAuthenticationService.ɵfac = function AuthenticationService_Factory(t) { return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MsalService)); };\r\nAuthenticationService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthenticationService, factory: AuthenticationService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}